)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. the same - strings
x <- data.frame(a = letters[1:3],
b = letters[4:6],
stringsAsFactors = FALSE)
y <- data.frame(a = letters[1:3],
b = letters[4:6],
stringsAsFactors = FALSE)
compare(x, y)
# ex. the same - factors
x <- data.frame(a = letters[1:3],
b = letters[4:6])
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
# ex. different amount of columns
x <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3)
)
compare(x, y)
# ex. factors / Dates / POSIXct
x <- data.frame(a = 1:3,
b = 4:6)
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
# ex. different number of rows
x <- data.frame(
a = rep(1, 2),
b = rep(2, 2),
c = rep(3, 2)
)
# ex. factors / Dates / POSIXct
x <- data.frame(a = 1:3,
b = 4:6)
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
source('~/GitHub/actuaryr/R/utils.R')
# ex. different number of rows
x <- data.frame(
a = rep(1, 2),
b = rep(2, 2),
c = rep(3, 2)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. factors / Dates / POSIXct
x <- data.frame(a = 1:3,
b = 4:6)
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
source('~/GitHub/actuaryr/R/utils.R')
source('~/GitHub/actuaryr/R/utils.R')
# ex. factors / Dates / POSIXct
x <- data.frame(a = 1:3,
b = 4:6)
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
# ex. different number of rows
x <- data.frame(
a = rep(1, 2),
b = rep(2, 2),
c = rep(3, 2)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. logicals
x <- data.frame(
a = c(TRUE, FALSE)
)
y <- data.frame(
a = c(FALSE, FALSE)
)
compare(x, y)
compare(1:3, 1:2)
library(actuaryr)
compare <- function(x, y) {
if(!inherits(x, "data.frame")) {stop("x must be a data frame.")}
if(!inherits(y, "data.frame")) {stop("y must be a data frame.")}
tables <- list(x = x, y = y)
tables <- .coerceToCharacter(tables) # factors, POSIXct and Dates are not handled
tables <- .getCommonColumns(tables)
tables <- .getCommonNrRows(tables)
tables <- .getCommonTypes(tables)
x <- tables$x
y <- tables$y
result <- x
for(j in 1:ncol(x)) {
if(typeof(x[, j]) == "character") {
result[, j] <- purrr::map2_chr(x[, j], y[, j], function(c.x, c.y) {
if(c.x == c.y) "the_same" else "different"
})
} else {
result[, j] <- x[, j] - y[, j]
}
}
return(result)
}
document()
library(devtools)
document()
devtools::load_all(".")
?compare
devtools::load_all(".")
source('~/GitHub/actuaryr/R/utils.R')
library(devtools)
check(0)
check()
use_package("magrittr")
check()
use_package("crayon")
us_package("purrr")
use_package("purrr")
use_package("purrr")
check()
x <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
y <- data.frame(
a = rep(1, 3),
d = rep(2, 3),
e = rep(3, 3)
)
compare(x, y)
devtools::load_all(".")
?paste
v <- letters[1:3]
v
paste("it is", v, "in this string")
paste("it is", v, "in this string", sep = "xyz")
paste("it is", v, "in this string", collapse = "xyz")
paste(v, collapse = "xyz")
paste(v, collapse = "xyz", sep = "sep")
paste(v, ep = "sep")
paste(v, sep = "sep")
paste(v, collapse = "s")
paste(v, collapse = "")
paste(v, collapse = ", ')
paste(v, collapse = ", ")
cat(crayon::yellow(paste0("Column(s) '", paste(not.in.x, collapse = "', '"), "' are not in ",
crayon::bold("LHS"), " so they have been removed from the comparison.\n")))
not.in.x <- colnames(y)[!c(colnames(y) %in% colnames(x))]
cat(crayon::yellow(paste0("Column(s) '", paste(not.in.x, collapse = "', '"), "' are not in ",
crayon::bold("LHS"), " so they have been removed from the comparison.\n")))
cat(crayon::yellow(paste0("Column(s) '", not.in.y, "' are not in ",
crayon::bold("RHS"), " so they have been removed from the comparison.\n")))
not.in.y <- colnames(x)[!c(colnames(x) %in% colnames(y))]
cat(crayon::yellow(paste0("Column(s) '", not.in.y, "' are not in ",
crayon::bold("RHS"), " so they have been removed from the comparison.\n")))
cat(crayon::yellow(paste0("Column(s) '", paste(not.in.x, collapse = "', '"), "' are not in ",
crayon::bold("LHS"), " so they have been removed from the comparison.\n")))
x <- data.frame(
a = rep(1, 4),
b = rep(2, 4),
c = rep(3, 4)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
source('~/GitHub/actuaryr/R/utils.R')
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
source('~/GitHub/actuaryr/R/utils.R')
devtools::load_all(".")
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
devtools::load_all(".")
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
.as <- function(x, type) {
if (type == "integer") {
result <- as.integer(x)
} else if (type == "double") {
result <- as.double(x)
} else if (type == "character") {
result <- as.character(x)
} else {
stop(paste("Unknown type:", type))
}
return(result)
}
.coerceToCharacter <- function(tables) {
x <- tables$x
y <- tables$y
# factors, POSIXct and Dates are converted to strings
factor.columns.x <- c()
for(j in 1:ncol(x)) {
class <- class(x[, j])[1] # POSIXct inherits from two classes
if(class == "factor" | class == "Date" | class == "POSIXct") {
factor.columns.x <- c(factor.columns.x, colnames(x)[j])
x[, j] <- as.character(x[, j])
}
}
cat(crayon::yellow(paste0("Column(s) '", paste(factor.columns.x, collapse = "', '"),
"' in ", crayon::bold("LHS"), " have been coerced from ",
class, " to character.\n")))
factor.columns.y <- c()
for(j in 1:ncol(y)) {
class <- class(y[, j])[1]
if(class == "factor" | class == "Date" | class == "POSIXct") {
factor.columns.y <- c(factor.columns.y, colnames(y)[j])
y[, j] <- as.character(y[, j])
}
}
cat(crayon::yellow(paste0("Column(s) '", paste(factor.columns.y, collapse = "', '"),
"' in ", crayon::bold("RHS"), " have been coerced from ",
class, " to character.\n")))
tables <- list(x = x, y = y)
return(tables)
}
.getCommonColumns <- function(tables) {
x <- tables$x
y <- tables$y
not.in.x <- colnames(y)[!c(colnames(y) %in% colnames(x))]
not.in.y <- colnames(x)[!c(colnames(x) %in% colnames(y))]
if(length(not.in.x) > 0) {
cat(crayon::yellow(paste0("Column(s) '", paste(not.in.x, collapse = "', '"),
"' are not in ", crayon::bold("LHS"),
" so they have been removed from the comparison.\n")))
}
if(length(not.in.y) > 0) {
cat(crayon::yellow(paste0("Column(s) '", paste(not.in.y, collapse = "', '"),
"' are not in ", crayon::bold("RHS"),
" so they have been removed from the comparison.\n")))
}
common.columns <- colnames(x)[colnames(x) %in% colnames(y)]
x <- x[common.columns]
y <- y[common.columns]
tables <- list(x = x, y = y)
return(tables)
}
.getCommonNrRows <- function(tables) {
x <- tables$x
y <- tables$y
n1 <- nrow(x)
n2 <- nrow(y)
if(n1 > n2) {
cat(crayon::yellow(paste0(crayon::bold("LHS"), " has more rows than ",
crayon::bold("RHS"), ". The last ", n1-n2,
" row(s) of ", crayon::bold("LHS"),
" have been removed.\n")))
x <- x[1:n2, ]
}
if(n2 > n1) {
cat(crayon::yellow(paste0(crayon::bold("RHS"), " has more rows than ",
crayon::bold("LHS"), ". The last ", n2-n1,
" row(s) of ", crayon::bold("RHS"),
" have been removed.\n")))
y <- y[1:n1, ]
}
tables <- list(x = x, y = y)
return(tables)
}
.getCommonTypes <- function(tables) {
x <- tables$x
y <- tables$y
util.types <- data.frame(
ColType = c("logical", "integer", "double", "character"),
Power = 1:4,
stringsAsFactors = FALSE
)
col.types.x <- c()
col.types.y <- c()
for(i in 1:ncol(x)) col.types.x[i] <- typeof(x[, i])
for(i in 1:ncol(y)) col.types.y[i] <- typeof(y[, i])
col.types <- data.frame(
Column = colnames(x),
ColTypeX = col.types.x,
ColTypeY = col.types.y,
stringsAsFactors = FALSE
)
types.tally <- col.types %>%
dplyr::left_join(util.types, by = c("ColTypeX" = "ColType")) %>%
dplyr::rename(PowerX = Power) %>%
dplyr::left_join(util.types, by = c("ColTypeY" = "ColType")) %>%
dplyr::rename(PowerY = Power) %>%
dplyr::mutate(Same = (ColTypeX == ColTypeY)) %>%
dplyr::mutate(StrongerType =
purrr::pmap_chr(list(PowerX, PowerY, ColTypeX, ColTypeY),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "Same"] == FALSE) {
row <- types.tally[r, ]
if(row$PowerY > row$PowerX) {
cat(crayon::yellow(paste0("Column '", row$Column, "' in ", crayon::bold("LHS"),
" has been coerced from ", row$ColTypeX,
" to ", row$StrongerType, ".\n")))
x[, row$Column] <- .as(x[, row$Column], type = row$StrongerType)
} else {
cat(crayon::yellow(paste0("Column '", row$Column, "' in ", crayon::bold("RHS"),
" has been coerced from ", row$ColTypeY,
" to ", row$StrongerType, ".\n")))
y[, row$column] <- .as(y[, row$Column], type = row$StrongerType)
}
}
}
tables <- list(x = x, y = y)
return(tables)
}
devtools::load_all(".")
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
x <- data.frame(
a = rep(1, 4),
b = rep(2, 4),
c = rep(3, 4)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
devtools::load_all(".")
a <- c()
length(a)
source('~/GitHub/actuaryr/R/utils.R')
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
x <- data.frame(
a = rep(1, 4),
b = rep(2, 4),
c = rep(3, 4)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
devtools::load_all(".")
x <- data.frame(
a = rep(1, 4),
b = rep(2, 4),
c = rep(3, 4)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
x <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
y <- data.frame(
a = letters[1:3],
b = letters[1:3],
c = letters[1:3]
)
compare(x, y)
x <- data.frame(
a = rep(1, 4),
b = rep(2, 4),
c = rep(3, 4)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. the same - numericals
x <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. the same - strings
x <- data.frame(a = letters[1:3],
b = letters[4:6],
stringsAsFactors = FALSE)
y <- data.frame(a = letters[1:3],
b = letters[4:6],
stringsAsFactors = FALSE)
compare(x, y)
# ex. the same - factors
x <- data.frame(a = letters[1:3],
b = letters[4:6])
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
# ex. different amount of columns
x <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3)
)
compare(x, y)
# ex. factors / Dates / POSIXct
x <- data.frame(a = 1:3,
b = 4:6)
y <- data.frame(a = letters[1:3],
b = letters[4:6])
compare(x, y)
# ex. different number of rows
x <- data.frame(
a = rep(1, 2),
b = rep(2, 2),
c = rep(3, 2)
)
y <- data.frame(
a = rep(1, 3),
b = rep(2, 3),
c = rep(3, 3)
)
compare(x, y)
# ex. logicals
x <- data.frame(
a = c(TRUE, FALSE)
)
y <- data.frame(
a = c(FALSE, FALSE)
)
compare(x, y)
compare(1:3, 1:2)
