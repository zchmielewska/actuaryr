# b = common columns and common types
df1.b <- df1.a
df2.b <- df2.a
no.df1 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no.df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
if(length(no.df2) > 0) print(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) print(paste("Columns in df2 but not in df1:", no.df1))
common.cols <- colnames(df1)[colnames(df1) %in% colnames(df2)]
# a = common columns
df1.a <- df1[, common.cols]
df2.a <- df2[, common.cols]
col.types1 <- c()
for(i in 1:ncol(df1.a)) {
col.types1[i] <- typeof(df1.a[, i])
}
col.types2 <- c()
for(i in 1:ncol(df2.a)) {
col.types2[i] <- typeof(df2.a[, i])
}
col.types <- data.frame(
column = common.cols,
col.type1 = col.types1,
col.type2 = col.types2,
stringsAsFactors = FALSE
)
util.types <- data.frame(
col.type = c("logical", "integer", "double", "character"),
power = 1:4,
stringsAsFactors = FALSE
)
types.tally <- dplyr::left_join(col.types, util.types, by = c("col.type1" = "col.type")) %>%
dplyr::rename(power1 = power) %>%
dplyr::left_join(util.types, by = c("col.type2" = "col.type")) %>%
dplyr::rename(power2 = power) %>%
dplyr::mutate(same = (col.type1 == col.type2)) %>%
dplyr::mutate(col.type = purrr::pmap_chr(list(types.tally$power1,
types.tally$power2,
types.tally$col.type1,
types.tally$col.type2),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
# b = common columns and common types
df1.b <- df1.a
df2.b <- df2.a
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "same"] == FALSE) {
column <- types.tally[r, "column"]
col.type <- types.tally[r, "col.type"]
if(col.type == "integer")   df1.b[, column] <- as.integer(df1.b[, column])
if(col.type == "double")    df1.b[, column] <- as.double(df1.b[, column])
if(col.type == "character") df1.b[, column] <- as.character(df1.b[, column])
if(col.type == "integer")   df2.b[, column] <- as.integer(df2.b[, column])
if(col.type == "double")    df2.b[, column] <- as.double(df2.b[, column])
if(col.type == "character") df2.b[, column] <- as.character(df2.b[, column])
}
}
df1.b
as_tbble(df1.b)
as_tibble(df1.b)
as_tibble(df2.b)
# c = common columns, types and number of rows
n1 <- nrow(df1)
n2 <- nrow(df2)
df1.c <- df1.b
df2.c <- df2.b
if(n1 > n2) df1.c <- df1.b[1:n2, ]
if(n2 > n1) df2.c <- df2.b[1:n1, ]
df1.c
df2.c
df1 <- data.frame(
x = rep("1", 4),
y = rep(2, 4),
z = rep(3, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
df1
df2
result <- df1.c
for(j in 1:ncol(df1.c)) {
if(typeof(df1.c[, j]) == "character") {
result[, j] <- map2_chr(df1.c[, j], df2.c[, j], function(x, y) if(x == y) "the_same" else "different")
} else {
result[, j] <- df1.c[, j] - df2.c[, j]
}
}
result
#' Title
#'
#' @param df1
#' @param df2
#'
#' @return
#' @export
#' @importFrom magrittr %>%
#'
#' @examples
compare <- function(df1, df2) {
# find common and uncommon columns
# change type of different columns
# cut uneven number of rows
# produce comparison result
no.df1 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no.df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
if(length(no.df2) > 0) print(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) print(paste("Columns in df2 but not in df1:", no.df1))
common.cols <- colnames(df1)[colnames(df1) %in% colnames(df2)]
# a = common columns
df1.a <- df1[, common.cols]
df2.a <- df2[, common.cols]
col.types1 <- c()
for(i in 1:ncol(df1.a)) {
col.types1[i] <- typeof(df1.a[, i])
}
col.types2 <- c()
for(i in 1:ncol(df2.a)) {
col.types2[i] <- typeof(df2.a[, i])
}
col.types <- data.frame(
column = common.cols,
col.type1 = col.types1,
col.type2 = col.types2,
stringsAsFactors = FALSE
)
util.types <- data.frame(
col.type = c("logical", "integer", "double", "character"),
power = 1:4,
stringsAsFactors = FALSE
)
types.tally <- dplyr::left_join(col.types, util.types, by = c("col.type1" = "col.type")) %>%
dplyr::rename(power1 = power) %>%
dplyr::left_join(util.types, by = c("col.type2" = "col.type")) %>%
dplyr::rename(power2 = power) %>%
dplyr::mutate(same = (col.type1 == col.type2)) %>%
dplyr::mutate(col.type = purrr::pmap_chr(list(types.tally$power1,
types.tally$power2,
types.tally$col.type1,
types.tally$col.type2),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
# b = common columns and types
df1.b <- df1.a
df2.b <- df2.a
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "same"] == FALSE) {
column <- types.tally[r, "column"]
col.type <- types.tally[r, "col.type"]
if(col.type == "integer")   df1.b[, column] <- as.integer(df1.b[, column])
if(col.type == "double")    df1.b[, column] <- as.double(df1.b[, column])
if(col.type == "character") df1.b[, column] <- as.character(df1.b[, column])
if(col.type == "integer")   df2.b[, column] <- as.integer(df2.b[, column])
if(col.type == "double")    df2.b[, column] <- as.double(df2.b[, column])
if(col.type == "character") df2.b[, column] <- as.character(df2.b[, column])
}
}
# c = common columns, types and number of rows
n1 <- nrow(df1)
n2 <- nrow(df2)
df1.c <- df1.b
df2.c <- df2.b
if(n1 > n2) df1.c <- df1.b[1:n2, ]
if(n2 > n1) df2.c <- df2.b[1:n1, ]
result <- df1.c
for(j in 1:ncol(df1.c)) {
if(typeof(df1.c[, j]) == "character") {
result[, j] <- map2_chr(df1.c[, j], df2.c[, j], function(x, y) if(x == y) "the_same" else "different")
} else {
result[, j] <- df1.c[, j] - df2.c[, j]
}
}
return(result)
}
df1 <- data.frame(
x = rep("1", 4),
y = rep(2, 4),
z = rep(3, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
compare(df1, df2)
#' Title
#'
#' @param df1
#' @param df2
#'
#' @return
#' @export
#' @importFrom magrittr %>%
#'
#' @examples
compare <- function(df1, df2) {
# find common and uncommon columns
# change type of different columns
# cut uneven number of rows
# produce comparison result
no.df1 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no.df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
if(length(no.df2) > 0) warning(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) warning(paste("Columns in df2 but not in df1:", no.df1))
common.cols <- colnames(df1)[colnames(df1) %in% colnames(df2)]
# a = common columns
df1.a <- df1[, common.cols]
df2.a <- df2[, common.cols]
col.types1 <- c()
for(i in 1:ncol(df1.a)) {
col.types1[i] <- typeof(df1.a[, i])
}
col.types2 <- c()
for(i in 1:ncol(df2.a)) {
col.types2[i] <- typeof(df2.a[, i])
}
col.types <- data.frame(
column = common.cols,
col.type1 = col.types1,
col.type2 = col.types2,
stringsAsFactors = FALSE
)
util.types <- data.frame(
col.type = c("logical", "integer", "double", "character"),
power = 1:4,
stringsAsFactors = FALSE
)
types.tally <- dplyr::left_join(col.types, util.types, by = c("col.type1" = "col.type")) %>%
dplyr::rename(power1 = power) %>%
dplyr::left_join(util.types, by = c("col.type2" = "col.type")) %>%
dplyr::rename(power2 = power) %>%
dplyr::mutate(same = (col.type1 == col.type2)) %>%
dplyr::mutate(col.type = purrr::pmap_chr(list(types.tally$power1,
types.tally$power2,
types.tally$col.type1,
types.tally$col.type2),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
# b = common columns and types
df1.b <- df1.a
df2.b <- df2.a
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "same"] == FALSE) {
column <- types.tally[r, "column"]
col.type <- types.tally[r, "col.type"]
if(col.type == "integer")   df1.b[, column] <- as.integer(df1.b[, column])
if(col.type == "double")    df1.b[, column] <- as.double(df1.b[, column])
if(col.type == "character") df1.b[, column] <- as.character(df1.b[, column])
if(col.type == "integer")   df2.b[, column] <- as.integer(df2.b[, column])
if(col.type == "double")    df2.b[, column] <- as.double(df2.b[, column])
if(col.type == "character") df2.b[, column] <- as.character(df2.b[, column])
}
}
# c = common columns, types and number of rows
n1 <- nrow(df1)
n2 <- nrow(df2)
df1.c <- df1.b
df2.c <- df2.b
if(n1 > n2) df1.c <- df1.b[1:n2, ]
if(n2 > n1) df2.c <- df2.b[1:n1, ]
result <- df1.c
for(j in 1:ncol(df1.c)) {
if(typeof(df1.c[, j]) == "character") {
result[, j] <- map2_chr(df1.c[, j], df2.c[, j], function(x, y) if(x == y) "the_same" else "different")
} else {
result[, j] <- df1.c[, j] - df2.c[, j]
}
}
return(result)
}
df1 <- data.frame(
x = rep("1", 4),
y = rep(2, 4),
z = rep(3, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
compare(df1, df2)
df1 <- data.frame(
x = rep("1", 4),
y = rep(4, 4),
z = rep(5, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
compare(df1, df2)
df1 <- data.frame(
x = rep("1", 4),
y = rep(4, 4),
z = rep(5, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
z = rep(3, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
compare(df1, df2)
2^5
2^30
2^6
2^7
2^8
2^9
2^10
2^11
?log
log(9000, base = 17)
3.21^17
1.3^17
3
1.6^17
1.7^17
compare(df1, df2)
no.df1 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no.df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
if(length(no.df2) > 0) warning(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) warning(paste("Columns in df2 but not in df1:", no.df1))
no.df1
no.df2
colnames(df1)
c(colnames(df1) %in% colnames(df2))
length(no.df2)
no.df1
no.df2
length(no.df2)
if(length(no.df2) > 0) warning(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) warning(paste("Columns in df2 but not in df1:", no.df1))
common.cols <- colnames(df1)[colnames(df1) %in% colnames(df2)]
common.cols
# a = common columns
df1.a <- df1[, common.cols]
df2.a <- df2[, common.cols]
df1.a
df2.a
col.types1 <- c()
for(i in 1:ncol(df1.a)) {
col.types1[i] <- typeof(df1.a[, i])
}
col.types1
col.types2 <- c()
for(i in 1:ncol(df2.a)) {
col.types2[i] <- typeof(df2.a[, i])
}
col.types2
col.types <- data.frame(
column = common.cols,
col.type1 = col.types1,
col.type2 = col.types2,
stringsAsFactors = FALSE
)
col.types
util.types <- data.frame(
col.type = c("logical", "integer", "double", "character"),
power = 1:4,
stringsAsFactors = FALSE
)
util.types
types.tally <- dplyr::left_join(col.types, util.types, by = c("col.type1" = "col.type")) %>%
dplyr::rename(power1 = power) %>%
dplyr::left_join(util.types, by = c("col.type2" = "col.type")) %>%
dplyr::rename(power2 = power) %>%
dplyr::mutate(same = (col.type1 == col.type2)) %>%
dplyr::mutate(col.type = purrr::pmap_chr(list(types.tally$power1,
types.tally$power2,
types.tally$col.type1,
types.tally$col.type2),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
types.tally
# b = common columns and types
df1.b <- df1.a
df2.b <- df2.a
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "same"] == FALSE) {
column <- types.tally[r, "column"]
col.type <- types.tally[r, "col.type"]
if(col.type == "integer")   df1.b[, column] <- as.integer(df1.b[, column])
if(col.type == "double")    df1.b[, column] <- as.double(df1.b[, column])
if(col.type == "character") df1.b[, column] <- as.character(df1.b[, column])
if(col.type == "integer")   df2.b[, column] <- as.integer(df2.b[, column])
if(col.type == "double")    df2.b[, column] <- as.double(df2.b[, column])
if(col.type == "character") df2.b[, column] <- as.character(df2.b[, column])
}
}
# c = common columns, types and number of rows
n1 <- nrow(df1)
n2 <- nrow(df2)
df1.c <- df1.b
df2.c <- df2.b
if(n1 > n2) df1.c <- df1.b[1:n2, ]
if(n2 > n1) df2.c <- df2.b[1:n1, ]
result <- df1.c
for(j in 1:ncol(df1.c)) {
if(typeof(df1.c[, j]) == "character") {
result[, j] <- map2_chr(df1.c[, j], df2.c[, j], function(x, y) if(x == y) "the_same" else "different")
} else {
result[, j] <- df1.c[, j] - df2.c[, j]
}
}
return(result)
#' Title
#'
#' @param df1
#' @param df2
#'
#' @return
#' @export
#' @importFrom magrittr %>%
#'
#' @examples
compare <- function(df1, df2) {
# find common and uncommon columns
# change type of different columns
# cut uneven number of rows
# produce comparison result
no.df1 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no.df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
if(length(no.df2) > 0) warning(paste("Columns in df1 but not in df2:", no.df2))
if(length(no.df1) > 0) warning(paste("Columns in df2 but not in df1:", no.df1))
common.cols <- colnames(df1)[colnames(df1) %in% colnames(df2)]
# a = common columns
df1.a <- df1[, common.cols]
df2.a <- df2[, common.cols]
col.types1 <- c()
for(i in 1:ncol(df1.a)) {
col.types1[i] <- typeof(df1.a[, i])
}
col.types2 <- c()
for(i in 1:ncol(df2.a)) {
col.types2[i] <- typeof(df2.a[, i])
}
col.types <- data.frame(
column = common.cols,
col.type1 = col.types1,
col.type2 = col.types2,
stringsAsFactors = FALSE
)
util.types <- data.frame(
col.type = c("logical", "integer", "double", "character"),
power = 1:4,
stringsAsFactors = FALSE
)
types.tally <- dplyr::left_join(col.types, util.types, by = c("col.type1" = "col.type")) %>%
dplyr::rename(power1 = power) %>%
dplyr::left_join(util.types, by = c("col.type2" = "col.type")) %>%
dplyr::rename(power2 = power) %>%
dplyr::mutate(same = (col.type1 == col.type2)) %>%
dplyr::mutate(col.type = purrr::pmap_chr(list(types.tally$power1,
types.tally$power2,
types.tally$col.type1,
types.tally$col.type2),
function(p1, p2, ct1, ct2) if(p1 > p2) ct1 else ct2))
# b = common columns and types
df1.b <- df1.a
df2.b <- df2.a
for(r in 1:nrow(types.tally)) {
if(types.tally[r, "same"] == FALSE) {
column <- types.tally[r, "column"]
col.type <- types.tally[r, "col.type"]
if(col.type == "integer")   df1.b[, column] <- as.integer(df1.b[, column])
if(col.type == "double")    df1.b[, column] <- as.double(df1.b[, column])
if(col.type == "character") df1.b[, column] <- as.character(df1.b[, column])
if(col.type == "integer")   df2.b[, column] <- as.integer(df2.b[, column])
if(col.type == "double")    df2.b[, column] <- as.double(df2.b[, column])
if(col.type == "character") df2.b[, column] <- as.character(df2.b[, column])
}
}
# c = common columns, types and number of rows
n1 <- nrow(df1)
n2 <- nrow(df2)
df1.c <- df1.b
df2.c <- df2.b
if(n1 > n2) df1.c <- df1.b[1:n2, ]
if(n2 > n1) df2.c <- df2.b[1:n1, ]
result <- df1.c
for(j in 1:ncol(df1.c)) {
if(typeof(df1.c[, j]) == "character") {
result[, j] <- map2_chr(df1.c[, j], df2.c[, j], function(x, y) if(x == y) "the_same" else "different")
} else {
result[, j] <- df1.c[, j] - df2.c[, j]
}
}
return(result)
}
df1 <- data.frame(
x = rep("1", 4),
y = rep(4, 4),
z = rep(5, 4),
stringsAsFactors = FALSE
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
z = rep(3, 5),
v = rep(3, 5),
stringsAsFactors = FALSE
)
compare(df1, df2)
