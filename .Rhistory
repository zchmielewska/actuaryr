library(devtools)
devtools::build_vignettes()
devtools::build_vignettes()
clean_vignettes()
use_vignette("actuaryr-vignette")
check()
install.packages("qpdf")
library(qpdf)
check()
library(actuaryr)
library(actuaryr)
devtools::use_travis()
use_travis()
use_travis()
library(actuaryr)
library(actuaryr)
devtools::install()
devtools::check_doc()
check_doc()
test()
library(devtools)
check_doc()
test()
devtools::build()
install.packages("devtools")
install.packages("lubridate")
library(devtools)
build()
install.packages("knitr")
build()
check()
install.packages("rmarkdown")
install.packages("qpdf")
check()
library(qpdf)
check()
library(actuaryr)
install.packages("devtools")
install.packages("qpdf")
install.packages("knitr")
install.packages("rmarkdown")
check()
library(devtools)
check()
install.packages("lubridate")
check()
library(qdpf)
library(qpdf)
check()
check()
check()
library(devtools)
check()
build()
library(lubridate)
use_package(lubridate)
use_package("lubridate")
R.version
install.package("lubridate")
install.packages("lubridate")
install.packages("lubridate")
check()
library(devtools)
check()
build()
.libPaths()
.libPaths(.libPaths(1))
.libPaths(.libPaths[1])
.libPaths[1]
.libPaths()[1]
.libPaths(.libPaths()[1])
.libPaths()
.libPaths("C:\\Program Files\\R\\R-3.6.2\\library")
.libPaths
.libPaths()
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
.libPaths("C:\\Users\\admin\\Documents\\R\\win-library\\3.6")
.libPaths()
.libPaths("C:\\Users\\admin\\Documents\\R\\win-library\\3.6")
.libPaths()
.libPaths("C:\\Program Files\\R\\R-3.6.2\\library")
.libPaths("C:\\Users\\admin\\Documents\\R\\win-library\\3.6")
.libPaths()
library(devtools)
check()
library(lubridate)
.libPaths()
build()
library(devtools)
build()
library(actuaryr)
library(lubridate)
library(actuaryr)
devtools::install_deps(dependencies = TRUE)
devtools::check_doc()
check_doc()
devtools::build_win()
build_win()
dref_fdom("2019-09-21")
dref_fdoq("2019-09-21")
dref_fdoy("2019-09-21")
dref_fwdom("2019-09-21")
dref_fwdoq("2019-09-21")
dref_fwdoy("2019-09-21")
dref_fwdom("2019-09-21")
dref_ldoy("2019-09-21")
dref_ldom("2019-09-21")
dref_ldoq("2019-09-21")
dref_ldoy("2019-09-21")
dref_lwdom("2019-09-21")
dref_lwdoq("2019-09-21")
dref_lwdoy("2019-09-21")
library(actuaryr)
check()
build()
check()
library(actuaryr)
library(actuaryr)
check()
check()
release()
spell_check()
install.packages("spelling")
spell_check()
release()
library(devtools)
check()
check()
library(actuaryr)
check()
check()
check()
build()
release()
check()
library(actuaryr)
check()
build()
release()
check_rhub()
check_rhub()
release()
release()
release()
library(devtools)
library(actuaryr)
devtools::check()
build()
release()
check_rhub()
release()
library("pandoc")
install.packages("pandoc")
library(devtools)
build()
library(pandoc)
install.packages(pandoc)
install.packages("pandoc")
library(knitr)
library(devtools)
devtools::check()
release()
install.packages(blogdown)
install.packages("blogdown")
blogdown::install_hugo()
library(actuaryr)
build()
library(devtools)
build()
build()
sessionInfo()
library(devtools)
release()
spell_check()
install.packages("spelling")
spell_check()
release()
check_rhub()
release()
release()
release()
dref_mtd <- function(date) {
if(!inherits(date, "Date")) {
tryCatch(
expr = {
date <- as.Date(date)
},
error = function(e) {
stop(paste0("Can't coerce ", date, " to date."), call. = FALSE)
}
)
}
month <- lubridate::month(date)
year  <- lubridate::year(date)
result <- lubridate::make_date(year = year, month = month, day = 1) + lubridate::days(-1)
return(result)
}
dref_mtd("2020-09-21")
dref_mtd("2020-03-08")
dref_mtd("2020-01-20")
test_that("dref_mtd() returns month-to-date", {
expect_equal(dref_mtd("2020-09-21"), as.Date("2020-08-31"))
expect_equal(dref_mtd("2020-03-08"), as.Date("2020-02-29"))
expect_equal(dref_mtd("2020-01-20"), as.Date("2019-12-31"))
})
source('~/GitHub/actuaryr/R/dref_mtd.R', echo=TRUE)
dref_qtd <- function(date) {
if(!inherits(date, "Date")) {
tryCatch(
expr = {
date <- as.Date(date)
},
error = function(e) {
stop(paste0("Can't coerce ", date, " to date."), call. = FALSE)
}
)
}
result <- dref_fdoq(date) + lubridate::days(-1)
return(result)
}
devtools::load_all(".")
?dref_ytd
library(actuaryr)
document()
library(devtools)
document()
devtools::load_all(".")
library(actuaryr)
test_that("dref_qtd() returns quarter-to-date", {
expect_equal(dref_mtd("2020-09-21"), as.Date("2020-06-30"))
expect_equal(dref_mtd("2020-06-30"), as.Date("2020-03-31"))
expect_equal(dref_mtd("2020-03-08"), as.Date("2019-12-31"))
})
test_that("dref_qtd() returns quarter-to-date", {
expect_equal(dref_qtd("2020-09-21"), as.Date("2020-06-30"))
expect_equal(dref_qtd("2020-06-30"), as.Date("2020-03-31"))
expect_equal(dref_qtd("2020-03-08"), as.Date("2019-12-31"))
})
test_that("dref_ytd() returns year-to-date", {
expect_equal(dref_ytd("2020-09-21"), as.Date("2019-12-31"))
expect_equal(dref_ytd("2020-06-30"), as.Date("2019-12-31"))
expect_equal(dref_ytd("2019-12-31"), as.Date("2018-12-31"))
})
(240+49+49)*582
(2.40+0.49+0.49)*5.82
?compare
df1 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
z = rep(3, 5)
)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
z = rep(3, 5)
)
colnames(df1)
df2 <- data.frame(
x = rep(1, 5),
y = rep(2, 5),
v = rep(3, 5)
)
colnames(df1)
colnames(df2)
colnames(df1) %in% colnames(df2)
in_df1_in_df2 <- colnames(df1)[colnames(df1) %in% colnames(df2)]
in_df1_in_df2
in_df1_in_df2 <- colnames(df1)[colnames(df1) %in% colnames(df2)]
in_df1_no_df2 <- colnames(df1)[!c(colnames(df1) %in% colnames(df2))]
in_df1_in_df2
in_df1_no_df2
no_df1_in_df2 <- colnames(df2)[!c(colnames(df2) %in% colnames(df1))]
no_df1_in_df2
